{
  "hash": "7d5b04092e11214a48c4ddd57fb411c4",
  "result": {
    "markdown": "---\ntitle: \"Running MultiLociBiallelicModel on bialleic SNP data\"\noutput: html_document\n---\n\n\n\n\n## The data\nData is generated by simulating sanger 100 barcode data for 100 samples with simulated COIs. [main Data tab](https://mrc-ide.github.io/PGEforge/website_docs/data_description.html#simulated-1) for further details.\n\n## R packages \n\nInstall R package vcfR for reading in vcf data. \n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.package(\"vcfR\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(vcfR)\n```\n:::\n\n\n\n## Converting from VCF to input data \n\nThe input data to MultiLociBiallelicModel requires a table with sample ID in first column and then a column for each marker present with a 0 == homozygous reference, 1 == homozygous alt, and 2 for heterozygote. This only works on biallelic SNPS and therefore should be limited to only these SNPs. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in vcf \nSpotMalariapfPanel_simData_sanger100 = read.vcfR(\"../../data/snp_barcode/SpotMalariapfPanel_simData_sanger100.vcf.gz\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nScanning file to determine attributes.\nFile attributes:\n  meta lines: 76\n  header_line: 77\n  variant count: 100\n  column count: 109\n\nMeta line 76 read in.\nAll meta lines processed.\ngt matrix initialized.\nCharacter matrix gt created.\n  Character matrix gt rows: 100\n  Character matrix gt cols: 109\n  skip: 0\n  nrows: 100\n  row_num: 0\n\nProcessed variant: 100\nAll variants processed\n```\n:::\n\n```{.r .cell-code}\n# get the genotyping info \nSpotMalariapfPanel_simData_sanger100_gt_tibble = SpotMalariapfPanel_simData_sanger100@gt %>%\n              as_tibble()\n\n# get the genomic location info \nSpotMalariapfPanel_simData_sanger100_fixDf = as_tibble(getFIX(SpotMalariapfPanel_simData_sanger100))\n\n# get a vector of whether or not the SNPs are biallelic \nsnpIsBiallelic = is.biallelic(SpotMalariapfPanel_simData_sanger100)\n\n# filter and combine the genotyping data \nSpotMalariapfPanel_simData_sanger100_fixDf_filt = SpotMalariapfPanel_simData_sanger100_fixDf[snpIsBiallelic, ]\nSpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt = SpotMalariapfPanel_simData_sanger100_fixDf_filt %>%\n  bind_cols( SpotMalariapfPanel_simData_sanger100_gt_tibble[is.biallelic(SpotMalariapfPanel_simData_sanger100),]) %>% \n  gather(sample, call, 9:ncol(.)) %>% \n  mutate(FORMAT = strsplit(FORMAT, split = \":\"), \n         call = strsplit(call, split = \":\")) %>% \n  unnest(cols = c(FORMAT, call))\n\n# get the genotyping calls \nSpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt %>% \n  filter(FORMAT == \"GT\") %>% \n  mutate(varID = paste0(CHROM, \"-\", POS)) %>% \n  mutate(genotypeCall = case_when(\n    \"0/0\" == call ~ \"0\", \n    \"1/1\" == call ~ \"1\", \n    \"0/1\" == call ~ \"2\"\n  )) %>% \n  mutate(genotypeCall = as.numeric(genotypeCall))\n\n\n# create the matrix for the input into the mle data \n\nSpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_sp = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt %>% \n  select(sample, varID, genotypeCall) %>% \n  rename(ID = sample) %>% \n  spread(varID, genotypeCall)\n```\n:::\n\n\n\nThe mle function is found within the R script supplied by the publication[@Tsoungui_Obama2022-gz]. The number of loci used in the publication was limited to about 10 and the function is unable to do large number of loci due to the size of the matrix that would have to be created so would advise limiting number of loci used, here doing the 6 most diverse loci by he. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculating he \n\nSpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt %>% \n  mutate(genotypeCallExpand = case_when(\n    2 == genotypeCall ~ \"ref/alt\", \n    1 == genotypeCall ~ \"alt\", \n    0 == genotypeCall ~ \"ref\"\n  ))\n\nSpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod_sel = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod %>% \n  select(varID, genotypeCallExpand) %>% \n  mutate(genotypeCallExpand = strsplit(genotypeCallExpand, split = \"/\")) %>% \n  unnest(genotypeCallExpand) %>% \n  group_by(varID, genotypeCallExpand) %>% \n  count() %>% \n  group_by(varID) %>% \n  mutate(total = sum(n)) %>% \n  mutate(freq = n/total)\n\nSpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod_sel_he = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod_sel %>% \n  group_by(varID) %>% \n  summarise(he = 1 - sum(freq^2)) %>% \n  arrange(desc(he))\n```\n:::\n\n\n\n## MLE  \n\n\n\n::: {.cell hash='MultiLociBiallelicModel_analysis_cache/html/running_MLE_646c23563274ef328eefebc2eaef9611'}\n\n```{.r .cell-code}\n# select just the top 6 loci \n\nSpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod_sel_he_top = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod_sel_he %>% \n  head(n = 6)\n\n# select out only the sample id and the varID \nselCols = c(\"ID\", SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod_sel_he_top$varID)\n\ninputToMLE = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_sp[, selCols]\n\n# load mle functions \nsource(\"SNPModel.R\")\n\n# Find the MLEs\nest <- mle(inputToMLE, id=TRUE)\n```\n:::\n\n\n## prevalence  \n\nSeveral prevalences are called from the mle estimation results. These are the definition provided by the paper[@Tsoungui_Obama2022-gz]. \n\n*  Unobservable prevalence \n\n>Since haplotype information is typically unavailable from molecular assays, haplotypes are per se not observable in molecular samples. To emphasize this fact we call the probability that a haplotype occurs in an infection “unobservable prevalence.”\n\n*  Conditional prevalence  \n\n> Because of ambiguity of haplotype information in multiple infections, it is impossible to identify the number of samples containing haplotype h in a dataset. In practice, often only unambiguous samples are considered, to determine prevalence. Here, we derive the corresponding quantity in the underlying framework, i.e., the prevalence of haplotype h, conditioned on observing only unambiguous data. The quantity is referred to as “conditional prevalence.”\n\n*  Relative prevalence  \n\n>Due to unobservable information, a statistical model is required to obtain estimates for frequencies. However, in practice, “ad-hoc” estimates are popular if statistical methods are not available. Frequency estimates can be obtained, by first disregarding all ambiguous observations, calculate the empirically observed unambiguous prevalence of all haplotypes, and finally normalizing them - here we refer to this as the “relative unambiguous prevalence.” \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Estimate prevalence\n## Unobservable prevalence\nunobsprev <- estunobsprev(est)\nunobsprev_df = tibble(\n  haplotype = dimnames(unobsprev)[[2]], \n  unobsprevalence = c(unobsprev)\n)\n\n## Conditional prevalence\ncondprev <- estcondprev(est)\ncondprev_df = tibble(\n  haplotype = dimnames(condprev)[[2]], \n  condprevalence = c(condprev)\n)\n\n## Relative prevalence\nrelprev <- estrelprev(inputToMLE, id=TRUE)\nrelprev_df = tibble(\n  haplotype = dimnames(relprev)[[2]], \n  relprevalence = c(relprev)\n)\n\nprevalences = full_join(\n  unobsprev_df, \n  condprev_df\n) %>% \n  full_join(relprev_df) %>% \n  arrange(desc(unobsprevalence))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(haplotype)`\nJoining with `by = join_by(haplotype)`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nDT::datatable(prevalences)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-50a48ffdf2f36098bcf7\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-50a48ffdf2f36098bcf7\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\"],[\"111010\",\"000001\",\"011010\",\"100001\",\"110111\",\"111110\",\"001100\",\"000101\",\"010101\",\"100110\",\"101101\",\"111011\",\"101111\",\"101000\",\"100101\",\"010010\",\"000000\",\"000011\",\"010110\",\"101100\",\"001011\",\"000100\",\"011111\",\"010111\",\"011001\",\"001010\",\"110100\",\"010100\",\"110000\",\"100100\",\"111001\",\"111101\",\"111111\",\"010000\",\"100010\",\"011100\",\"001001\",\"100000\",\"110010\",\"110110\",\"000010\",\"000110\",\"000111\",\"001000\",\"001101\",\"001110\",\"001111\",\"010001\",\"010011\",\"011000\",\"011011\",\"011101\",\"011110\",\"100011\",\"100111\",\"101001\",\"101010\",\"101011\",\"101110\",\"110001\",\"110011\",\"110101\",\"111000\",\"111100\"],[0.1615072306411358,0.157528460441425,0.1565849162521909,0.1279118728770969,0.1252956957424402,0.1103088358461892,0.09056491479821858,0.08319674113132608,0.08099660140214862,0.06557053474156462,0.0644669770707012,0.06231495716199411,0.06175217039514819,0.0574130282122625,0.05342236923922677,0.05273503467775763,0.05080139679552592,0.05020011002262683,0.04992625361375067,0.04826747769533112,0.04328521540397725,0.04109119850560345,0.0399690813479294,0.03444082668869641,0.03294544141472302,0.03272252828532111,0.03177466020743053,0.0303628023491264,0.03032267432123559,0.02935675793563549,0.02627962397325057,0.026047932385823,0.02541654199901644,0.02531624788492533,0.0232954200206617,0.02296161115045966,0.009996078370066381,2.279474294616448e-07,1.442013220405938e-09,1.293742599990022e-09,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0.09424318274541127,0.09037346256207475,0.08543017592874495,0.06603515134958589,0.05635076767849229,0.05500200811587137,0.04117996197356496,0.04498681298075336,0.03764518687375517,0.02770454838121758,0.030451241664873,0.03029305079357239,0.02686605655406453,0.02400806518944182,0.02744173767302352,0.02575115347145655,0.02461844493479802,0.02390803945853577,0.02196406961106004,0.02344030501042019,0.01854912672907818,0.02046130293289938,0.01660425308225489,0.01726816368045432,0.01332771861678517,0.01532828706335684,0.01343659749075159,0.01458087358509083,0.01245914235138299,0.01395947836063129,0.01135938456131917,0.0112107351079411,0.01384167229255564,0.01131055294585621,0.009598102103051915,0.009919363619465476,0.004706429845767129,1.124811792033504e-07,6.904529013244372e-10,6.700523510134353e-10,0,0,2.006428440441725e-16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0.06896551724137931,0.06896551724137931,0.06896551724137931,0.03448275862068965,null,0.03448275862068965,0.06896551724137931,0.03448275862068965,null,0.03448275862068965,0.06896551724137931,null,null,null,0.06896551724137931,0.03448275862068965,null,0.03448275862068965,0.06896551724137931,0.06896551724137931,null,0.03448275862068965,null,null,0.03448275862068965,null,null,0.03448275862068965,null,0.03448275862068965,null,0.03448275862068965,0.03448275862068965,null,null,0.03448275862068965,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>haplotype<\\/th>\\n      <th>unobsprevalence<\\/th>\\n      <th>condprevalence<\\/th>\\n      <th>relprevalence<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3,4]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n## Sample MOI calls  \n\nUsing the mle estimation results combined with the haplotype calls for the sample there are functions provided for making MOI estimates based on what's the most probable MOI. The function samplwiseMOI gives you a list of probabilities for a range of MOIs and returns the most the probable MOI. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert to matrix to make it easier to provide the haplotype call to the function \ninputToMLE_mat = as.matrix(inputToMLE[, 2:ncol(inputToMLE)])\nrownames(inputToMLE_mat) = inputToMLE$ID\n\nallSampleMOIs = tibble()\n# iterate over each sample by row and get an estimate of the MOI for each sample by providing the haplotype call for that sample \n\nfor (row in 1:nrow(inputToMLE_mat)) {\n  # estimate MOI probabilites \n  currentSampleMOI = samplwiseMOI(inputToMLE_mat[row, ], est)\n  # gathering \n  allSampleMOIs = bind_rows(allSampleMOIs,\n                            tibble(sample = rownames(inputToMLE_mat)[row],\n                                   MOI = currentSampleMOI$MOI))\n}\n\nDT::datatable(allSampleMOIs)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-c0667a0faeb6b8b1b9f9\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-c0667a0faeb6b8b1b9f9\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\"],[\"Bangladesh-01\",\"Bangladesh-02\",\"Bangladesh-03\",\"Bangladesh-04\",\"Bangladesh-05\",\"Bangladesh-06\",\"Bangladesh-07\",\"Bangladesh-08\",\"Bangladesh-09\",\"Bangladesh-10\",\"Bangladesh-11\",\"Bangladesh-12\",\"Bangladesh-13\",\"Bangladesh-14\",\"Bangladesh-15\",\"Bangladesh-16\",\"Bangladesh-17\",\"Bangladesh-18\",\"Bangladesh-19\",\"Bangladesh-20\",\"Bangladesh-21\",\"Bangladesh-22\",\"Bangladesh-23\",\"Bangladesh-24\",\"Bangladesh-25\",\"Bangladesh-26\",\"Bangladesh-27\",\"Bangladesh-28\",\"Bangladesh-29\",\"Bangladesh-30\",\"Bangladesh-31\",\"Bangladesh-32\",\"Bangladesh-33\",\"Bangladesh-34\",\"Bangladesh-35\",\"Bangladesh-36\",\"Bangladesh-37\",\"Bangladesh-38\",\"Bangladesh-39\",\"Bangladesh-40\",\"Bangladesh-41\",\"Bangladesh-42\",\"Bangladesh-43\",\"Bangladesh-44\",\"Bangladesh-45\",\"Bangladesh-46\",\"Bangladesh-47\",\"Bangladesh-48\",\"Bangladesh-49\",\"Bangladesh-50\",\"Ghana-01\",\"Ghana-02\",\"Ghana-03\",\"Ghana-04\",\"Ghana-05\",\"Ghana-06\",\"Ghana-07\",\"Ghana-08\",\"Ghana-09\",\"Ghana-10\",\"Ghana-11\",\"Ghana-12\",\"Ghana-13\",\"Ghana-14\",\"Ghana-15\",\"Ghana-16\",\"Ghana-17\",\"Ghana-18\",\"Ghana-19\",\"Ghana-20\",\"Ghana-21\",\"Ghana-22\",\"Ghana-23\",\"Ghana-24\",\"Ghana-25\",\"Ghana-26\",\"Ghana-27\",\"Ghana-28\",\"Ghana-29\",\"Ghana-30\",\"Ghana-31\",\"Ghana-32\",\"Ghana-33\",\"Ghana-34\",\"Ghana-35\",\"Ghana-36\",\"Ghana-37\",\"Ghana-38\",\"Ghana-39\",\"Ghana-40\",\"Ghana-41\",\"Ghana-42\",\"Ghana-43\",\"Ghana-44\",\"Ghana-45\",\"Ghana-46\",\"Ghana-47\",\"Ghana-48\",\"Ghana-49\",\"Ghana-50\"],[3,3,1,1,2,1,1,2,3,2,1,1,2,3,1,3,3,2,2,1,1,1,2,4,2,2,2,2,2,2,2,2,3,2,2,1,3,1,2,2,2,1,2,2,3,3,2,2,2,2,2,1,4,1,2,2,1,4,2,2,2,1,2,2,3,3,3,2,3,1,2,2,1,1,1,2,2,2,3,3,2,3,4,2,4,2,1,2,2,2,3,2,3,2,2,3,2,3,1,3]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>sample<\\/th>\\n      <th>MOI<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":2},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nSince these samples are simualted, the known COI for the sample is known so can compare simulated MOI(COI) vs determined MOI by MultiLociBiallelicModel. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimCOI = readr::read_tsv(\"../../data/snp_barcode/SpotMalariapfPanel_simData_sanger100_simCOIs.tab.txt\") %>% \n  rename(sample = Patient) %>% \n  left_join(allSampleMOIs)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 100 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): Patient\ndbl (1): initialCOI\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nJoining with `by = join_by(sample)`\n```\n:::\n\n```{.r .cell-code}\nggplot(simCOI) +\n  geom_count(aes(x = initialCOI,\n                 y = MOI)) +\n  geom_abline(intercept = 0, slope = 1)\n```\n\n::: {.cell-output-display}\n![](MultiLociBiallelicModel_analysis_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimCOI_sum = simCOI %>%\n  group_by(initialCOI, MOI) %>%\n  count()\n\nggplot(simCOI_sum) +\n  geom_col(aes(x = initialCOI, y = n, fill = factor(MOI)), color = \"black\", position = \"dodge\") +\n  scale_fill_brewer(\"Observed MOI\", palette = \"Dark2\") + \n  theme_minimal() + \n  labs(x = \"Simualted COI\")\n```\n\n::: {.cell-output-display}\n![](MultiLociBiallelicModel_analysis_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/datatables-binding-0.28/datatables.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/dt-core-1.13.4/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/dt-core-1.13.4/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/dt-core-1.13.4/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}