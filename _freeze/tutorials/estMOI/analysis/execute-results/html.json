{
  "hash": "e4b9a858a225d2468071afeb2eca408f",
  "result": {
    "markdown": "---\ntitle: \"How to run estMOI\"\noutput: html_document\n---\n\n\n\n\n## The data\n\nTo perform the analysis estMOI requires:\n\n* A bam file which should be sorted\n* A vcf file which can either be zipped or unzipped\n* The reference genome\n\nFor the purpose of hosting the data we have provided bam and vcf files containing data for the \n_csp_, _celtos_ and _ama1_ genes. You can find these files at \n[https://github.com/mrc-ide/PGEforge/tree/main/data/wgs/labisolate_subset](https://github.com/mrc-ide/PGEforge/tree/main/data/wgs/labisolate_subset).\nDownload the calls.tar.gz file and unzip. You should now have a folder named **calls** which contains the bam and VCF files that\nwe will user later in the practical.\n\nWe now need to download the reference genome. You can download this from [PlasmoDB](https://plasmodb.org/plasmo/app) by clicking on \n[this link](https://plasmodb.org/common/downloads/release-66/Pfalciparum3D7/fasta/data/PlasmoDB-66_Pfalciparum3D7_Genome.fasta)\n\n## Running the tool\n\nLet's use run the analysis for the sample PG0402-C which is sample with a known MOI > 1. Let's \n\nBefore we can run estMOI we need to index the reference genome. This can by done with\n\n``` bash\nsamtools faidx PlasmoDB-66_Pfalciparum3D7_Genome.fasta\n```\n\nNow let's run the pipeline with default parameters. The three positional arguments should be:\n\n1. The bam file \n2. The VCF file\n3. The reference genome\n\nYou can also customise the output file prefix with `--out`\n\n``` bash\nestMOI PG0402-C.sorted.bam PG0402-C.vcf PlasmoDB-66_Pfalciparum3D7_Genome.fasta --out PG0402-C\n```\n\nAfter running it will print a summary of the analysis to the terminal and you should see the output below:\n\n``` bash\n#\tRUNNING estMOI version 1.03\n#\t................\n#\tPRINT ESTIMATES...\n#\tMOI\tCount\t%Total\n#\t1\t319\t66.88\n#\t2\t158\t100.00\tMOI-estimate\n\t#DONE MOI-estimate using PG0402-C.sorted.bam\n```\n\n### Output description\n\nRunning estMOI will produce two output files with the prefix that you specified before.\nAdditionally, the values of the `--maxsnp`, `--mindis`, `--maxdis` and `--minhap` parameters will also \nbe present in the output file names.\n\nFor example, you should have the files PG0402-C.moi.3.10.500.3.log and PG0402-C.moi.3.10.500.3.txt \nin your directory. \n\n\n#### Log file\n\nThe file ending in .log contains the individual combinations of all haplotypes that were found.\nFor each haplotype it will give you the locations of the SNPs together with the individual haplotype \ncombinations. For example, here is an excerpt form the log file that contains this information for one \nhaplotype:\n\n``` bash\nPG0402-C.sorted.bam\tPf3D7_03_v3\t221435 221457 221554\t2\n\t# PG0402-C.sorted.bam Pf3D7_03_v3 221435 221457 221554 Hapotype:\t T A C\t48\n\t# PG0402-C.sorted.bam Pf3D7_03_v3 221435 221457 221554 Hapotype:\t T G C\t10\n```\n\n#### Txt file\n\nThe result file will contain the the same information as printed to the terminal.\nIt lists the numbers of haplotypes and for each MOI and provides an estimate of the MOI.\nThe the example below there are 319 locus with a single haplotypes and 158 with two haplotypes.\n\n``` bash\n#MOI\tCount\t%Total\n1\t319\t66.88\n2\t158\t100.00\tMOI-estimate\n```\n\n## Refining the results\n\nLet's run this on another sample:\n\n``` bash\nestMOI PG0389-C.sorted.bam PG0389-C.vcf  PlasmoDB-66_Pfalciparum3D7_Genome.fasta --out PG0389-C\n```\n\nYou should see that no MOI has been estimates:\n\n``` bash\n#\tRUNNING estMOI version 1.03\n#\t................\n#\tPRINT ESTIMATES...\n#\tMOI\tCount\t%Total\n\t#DONE MOI-estimate using PG0389-C.sorted.bam\n```\n\nTo troubleshoot it is a good idea to look at the log. Run the following to find information about the \nhaplotypes that have been analysed: \n\n``` bash\ncat  PG0389-C.moi.3.10.500.3.log\n```\n\nYou should see no output, indicating that no haplotypes were analysed and explains why there was no \nMOI estimate produced. estMOI loads the variant locations from the VCF and looks at combinations of \nthose in the reads using the bam files. \n\nLooking at the bam file it is clear that there are some variant haplotypes present. \n\n![](img/igv_screenshot.png)\n\nNext thing to do is to check that we actually have variants in the VCF. You can do this with:\n\n``` bash\nless PG0389-C.vcf\n```\n\nYou should be able to see that there are many variant positions, however you might notice that the quality \nvalues are very low. estMOI has a hard-coded cutoff for the quality value and only analyses variants with \nquality values greater or equal to 30. This may explain why the estMOI didn't analyse any haplotype positions.\n\nThe VCFs were created with freebayes using a diploid model and low frequency variants are assigned low \nquality values. We can use a different variant caller, lofreq, that is more suited to low frequency variants which \nwill hopefully assign higher quality values to these variants. First let's install lofreq:\n\n``` bash\nmamba install -y -c conda-forge -c bioconda lofreq\n```\n\nNow we can use lofreq to call variants from the bam:\n\n``` bash\nlofreq call -f PlasmoDB-66_Pfalciparum3D7_Genome.fasta PG0389-C.sorted.bam > PG0389-C.lofreq.vcf\n```\n\nNow we are ready to call run estMOI again using the new vcf you created:\n\n``` bash\nestMOI PG0389-C.sorted.bam PG0389-C.lofreq.vcf  PlasmoDB-66_Pfalciparum3D7_Genome.fasta  --out PG0389-C\n```\n\nYou shold hopefully see an MOI estimate of 2 now after the tools finishes running:\n\n``` bash\n#\tRUNNING estMOI version 1.03\n#\t................\n#\tPRINT ESTIMATES...\n#\tMOI\tCount\t%Total\n#\t1\t98\t68.06\n#\t2\t46\t100.00\tMOI-estimate\n\t#DONE MOI-estimate using PG0389-C.sorted.bam\n```\n\n## Summary\n\nTo summarise, we can use estMOI to estimate MOI using the read data stored in bams and variants stored \nin VCF format. The variants filtered by the pipeline based on a quality value so make sure you are happy\nwith the variants your VCF before proceeding with the analysis.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}