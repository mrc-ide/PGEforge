{
  "hash": "86d03818b10fa8b77e581fb026b1d0e8",
  "result": {
    "markdown": "---\ntitle: \"Tutorial for Running `paneljudge`\"\noutput: html_document\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n## Terminology \n| Term   | Definition                                                                                                |   |   |   |\n|--------|-----------------------------------------------------------------------------------------------------------|---|---|---|\n| Allele | A genetic state (a specific realization of a variant)                                                     |   |   |   |\n| Site   | Also referred to as a locus. It is a genomic location that has more than one state (more than one allele) |   |   |   |\n| Panel  | Collection of alleles. Others may call this a barcode, fingerprint, etc.                                  |   |   |   |\n\n\\n \n\n## The Data \nAs input for `paneljudge`, we will start with a variant call file, abbreviated as a [VCF](chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https://samtools.github.io/hts-specs/VCFv4.3.pdf) of the Sanger Barcode from Vietnam For `paneljudge`, we are attempting to determine the \"information\" contained in each site (and collective sites in a panel). In order to quantify information, we need to know the allele frequency across each site (the frequency that we see each allele at a given site). Given that we are using a monoclonal (simple genetic sample) and biallelic data (alleles have only two possible states), we can take the average across the VCF genotype calls and then the complement for first and second allele, respectively^[Multiallelic sites lack complement p-q properties and would need to be summed respectively]. Below, we will use `vcfR` to convert the VCF into a population-level allele frequency matrix. We will then convert the PLAF to a dataframe/matrix with the frequency of each of our two alleles for each site (needed for `paneljudge`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#......................\n# vcf and plaf\n#......................\n# read in the VCF from the main data page \n\nvcf <- vcfR::read.vcfR(\"../../data/snp_barcode/sangerBarcode_SNP_INDEL_Pf3D7_ALL_v3.combined.filtered.vqslod6.biallelic_snp.Vietnam.vcf.gz\", verbose = F)\n\n# convert the data into genotype calls\ngtcalls <- vcfR::extract.gt(vcf, as.numeric = T) \n\n# population level allele frequency \n# rows are sites/alleles, columns are samples\nplaf <- apply(gtcalls, 1, mean, na.rm = T) # apply the mean function across rows (\"1\" option)\n\n# now bring into a table in needed format for `paneljudge` \npjdat <- data.frame(Allele.1 = plaf, Allele.2 = 1-plaf)\nrownames(pjdat) <- names(plaf)\n\n#......................\n# going to need genetic positions later\n# Extensive data wrangling for genetic position \n#......................\nPOS <- tibble::tibble(CHROM = vcfR::getCHROM(vcf),  \n                      POS = vcfR::getPOS(vcf))\nPOS <- split(POS, factor(POS$CHROM))\nds <- lapply(POS, function(x){diff(unlist(x[,2]))})\n# make last pos end of chrom \nds <- lapply(ds, function(x){x[length(x)] <- 1e8; return(x) })\nds <- unlist(ds)\n```\n:::\n\n\nPrior to using `paneljudge`, we can visualize our population-level allele frequencies (PLAF). If the population has undergone significant drift or is inbred, we may expect to see a clustering of PLAF around values less than 0.5 or greater than 0.5 (and more close to 0.1 or 0.9). In contrast, if a population is panmictic with multiple outbreeding populations, we may expect our PLAF values to be closer to 0.5. \n\n::: {.cell hide='true'}\n\n```{.r .cell-code}\ntibble::tibble(plaf = plaf,\n               allele = names(plaf)) %>% \n  ggplot() + \n  geom_bar(aes(x = allele, y = plaf), stat = \"identity\") +\n  theme_linedraw() + \n  theme(axis.text.x = element_blank(),\n        axis.ticks.x = element_blank()) +\n  xlab(\"Alleles\") + ylab(\"Pop. Lvl Allele Freq\")\n```\n\n::: {.cell-output-display}\n![](paneljudge_analysis_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Intuition Behind `paneljudge`\nBefore discussing the functionality of `paneljudge`, it may be helpful to build intuition around what gives an allele more information for calculating relatedness.   \nThere are two mains ways to estimate relatedness among individuals: identity by descent (IBD) or time to most recent common ancestor (TMRCA) (see [Speed & Balding 2015](https://pubmed.ncbi.nlm.nih.gov/25404112/) for further discussion). The `paneljudge` package focuses on IBD, which measures the amount of genome (or specific alleles) shared between two individuals (i.e. recent coalescence). If an allele is extremely rare in the population but is shared by two individuals, this carries much more \"information\" than if individuals shared an allele that was common in the population. For example, if two individuals were 3 meters tall, we may suspect they were more likely to be related to each other versus if they were both 1.7 meters (average height). Similar to height (versus say eye color), alleles that have more variation and \"extremes\" are more useful than alleles that only have a few states: multiple alleles at nearly equal frequencies (i.e. 10 alleles, each at 10% frequency).    \n\nIn statistics, we can consider an allele a \"set\" of potential states, or elements. The number of states that our allele can take, or more formally, the number of elements in our set determines the cardinality. Sites and panels that have a high cardinality (many alleles) are expected to be more informative, particularly if those alleles are equifrequent. However, per Dr. Aimee Taylor, alleles are rarely equifrequent in real life (due to a variety of population genetic forces like drift, selection etc), so it is useful to consider **effective cardinality**, which is \"an allele count that accounts for inequifrequent alleles: it is equal to cardinality if all alleles are equifrequent; otherwise, it is less\".\n\n## Using `paneljudge`\nBelow, we will calculate the diversity, effective cardinality, and absolute cardinality of our sites. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiversities <- compute_diversities(pjdat)\neff_cardinalities <- compute_eff_cardinalities(pjdat,  warn_fs = FALSE)\ncardinalities <- apply(pjdat, 1, function(x){sum(x > 0)}) \n```\n:::\n\n\nNote, the true cardinality of our data should all be 2, since we have biallelic sites. As a sanity check, we can test this assumption with the code `unqiue(cardinalities)`.\n\nHere, we can compare the diversity versus the effective cardinality of our sites. Notably, per Dr. Aimee Taylor's package vignette/point above, effective cardinality will scale linearly with cardinality (as it is an adjustment of that original measure) whereas diversity does not have a clear relationship with cardinality. As a result, while diversity is a useful population-genetic statistic, it may not be as reliable of a marker for relatedness \"informativeness\".  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble::tibble(eff_cardinalities = eff_cardinalities, \n               diversities = diversities) %>% \n  ggplot() + \n  geom_point(aes(y = eff_cardinalities, x = diversities)) + \n  geom_hline(yintercept = 2, color = \"red\") +\n  theme_linedraw() + \n  ylab(\"Eff. Cardinality\") + xlab(\"Diversity\") + \n  labs(caption = \"Red-Line Represent True Cardinality\")\n```\n\n::: {.cell-output-display}\n![](paneljudge_analysis_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Comparing Panels with `paneljudge`\n\n### Panel Competitor\nFor the purpose of this tutorial, we will make a panel with the same number of sites as the Sanger Barcode but has no information (alleles fixed).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# all alleles fixed, no information \nbadpjdat <- pjdat\nbadpjdat[,1] <- 0.99\nbadpjdat[,2] <- 0.01\n```\n:::\n\n\n### Using Simulation to Evaluate Panel \"Informativeness\" \nIn order to evaluate if a specific panel is useful and informative for determining relatedness in a population, we use simulation to determine if we can capture expected values of relatedness from realizations that are simulated from our panel.  \nSimulations are created using a hidden-markov model that is described in [Taylor et al. 2019, Genetics](https://pubmed.ncbi.nlm.nih.gov/31209105/). We will create simulates at very levels of $r$ but assume a fixed switch rate, $k$. \n\nA simple conception of the hidden-markov model is to imagine two samples moving in parallel down a track, where they switch \"diverge\" and become unrelated based on our switch rate and relatedness factor. The samples can then re-converge again later depending on the switch rate and relatedness. In this way, region of DNA are shared from a common ancestor and sections of IBD are created.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#............................................................\n# Function for Making Simulations and Capturing Output \n#...........................................................\nget_sim_ret <- function(fs, ds, k, r, n) {\n  # init\n  out <- c()\n  # for loops for clarity \n  for (i in 1:n) { # for each pair\n    for (j  in 1:length(rs)) { # for each relatedness value \n      \n      # First simulate a new genotype pair\n      Ys <- simulate_Ys(fs, ds, k, rs[j], warn_fs = FALSE)\n      \n      # Second, estimate r and k\n      krhat <- estimate_r_and_k(fs, ds, Ys, warn_fs = FALSE)\n      \n      # Third, compute confidence intervals (CIs)\n      CIs <- compute_r_and_k_CIs(fs, ds, khat = krhat['khat'], rhat = krhat['rhat'],  warn_fs = FALSE)\n      \n      # fourth save it out \n      out <- rbind( c(krhat['rhat'], CIs['rhat',]), out)\n    }\n  }\n  return(out)\n}\n\n#............................................................\n# Run Sim Capturer on Good and Bad Panel \n#...........................................................\n# place holders \nrs <- c(\"0.01\"=0.01, \"0.25\"=0.25, \"0.50\"=0.50, \"0.75\"=0.75, \"0.99\"=0.99)\nk <- 5 # Data-generating switch rate parameter value\nn <- 5 # Number of pairs to simulate per r in rs\nds <- runif(n = nrow(pjdat), min = 1, max = 1e6) # random distances, would actually be based on genomic location\n\n# good panel run \ngoodpanel_results <- get_sim_ret(fs = pjdat, \n                                 ds = ds, \n                                 k = 5, # Data-generating switch rate parameter value\n                                 n = 5, # Number of pairs to simulate per r in rs\n                                 r = rs) \n\n\n# bad panel run \nbadpanel_results <- get_sim_ret(fs = badpjdat, \n                                ds = ds, \n                                k = 5, # Data-generating switch rate parameter value\n                                n = 5, # Number of pairs to simulate per r in rs\n                                r = rs) \n```\n:::\n\n\nNow we can compare the results of the simulations and expect for the better panel to have smaller (tighter) confidence intervals. Tighter confidence intervals indicate that the panel provided more information that allowed for more precise estimates of relatedness (given the predetermined population allele frequencies). \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# drop in R sim values\ngoodpanel_results_tb <- goodpanel_results %>% \n  tibble::as_tibble(.) %>% \n  magrittr::set_colnames(c(\"rhat\", \"LCI\", \"HCI\")) %>% \n  dplyr::mutate(r = sort(rep(rs, n))) %>% \n  dplyr::mutate(CIwidth = HCI - LCI,\n                level = \"good\") \n\nbadpanel_results_tb <- badpanel_results %>% \n  tibble::as_tibble(.) %>% \n  magrittr::set_colnames(c(\"rhat\", \"LCI\", \"HCI\")) %>% \n  dplyr::mutate(r = sort(rep(rs, n))) %>% \n  dplyr::mutate(CIwidth = HCI - LCI,\n                level = \"bad\") \n\n\n# now combine for easier plotting \ndplyr::bind_rows(goodpanel_results_tb, badpanel_results_tb) %>% \n  dplyr::mutate(rfact = factor(r)) %>% \n  ggplot() + \n  geom_boxplot(aes(x = rfact, y = CIwidth, fill = level)) +\n  facet_grid(~level) +\n  xlab(\"Simualted R Value\") + ylab(\"95% CI Width\")\n```\n\n::: {.cell-output-display}\n![](paneljudge_analysis_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Summary\nThis tutorial explains how one could use the `paneljudge` R package for identifying which panel would provide more precise and better inference of relatedness. We walked through how to organize data for `paneljudge` input, the intuition behind the package, and how to run panel comparisons. Finally, we discuss how to determine which panel may provide more precise inference of relatedness given the inputted population allele frequencies. \n\n\n",
    "supporting": [
      "paneljudge_analysis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}