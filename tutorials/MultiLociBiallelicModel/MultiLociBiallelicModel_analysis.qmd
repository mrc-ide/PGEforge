---
title: "Running MultiLociBiallelicModel on bialleic SNP data"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
```

## The data
Data is generated by simulated sanger 100 barcode data for 100 simualted sammples with simulated COIs. [main Data tab](https://mrc-ide.github.io/PGEforge/website_docs/data_description.html#simulated-1) for further details.

## R packages 

Install R package vcfR for reading in vcf data. 
```{r, eval=FALSE}
install.package("vcfR")
```

```{r, warning=FALSE, message=FALSE, error=FALSE}
library(tidyverse)
library(vcfR)
```


## Converting from VCF to input data 

The input data to MultiLociBiallelicModel requires a table with sample ID in first column and then a column for each marker present with a 0 == homozygous reference, 1 == homozygous alt, and 2 for heterozygote. This only works on biallelic SNPS and therefore should be limited to only these SNPs. 

```{r}
# read in vcf 
SpotMalariapfPanel_simData_sanger100 = read.vcfR("../../data/snp_barcode/SpotMalariapfPanel_simData_sanger100.vcf.gz")

# get the genotyping info 
SpotMalariapfPanel_simData_sanger100_gt_tibble = SpotMalariapfPanel_simData_sanger100@gt %>%
              as_tibble()

# get the genomic location info 
SpotMalariapfPanel_simData_sanger100_fixDf = as_tibble(getFIX(SpotMalariapfPanel_simData_sanger100))

# get a vector of whether or not the SNPs are biallelic 
snpIsBiallelic = is.biallelic(SpotMalariapfPanel_simData_sanger100)

# filter and combine the genotyping data 
SpotMalariapfPanel_simData_sanger100_fixDf_filt = SpotMalariapfPanel_simData_sanger100_fixDf[snpIsBiallelic, ]
SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt = SpotMalariapfPanel_simData_sanger100_fixDf_filt %>%
  bind_cols( SpotMalariapfPanel_simData_sanger100_gt_tibble[is.biallelic(SpotMalariapfPanel_simData_sanger100),]) %>% 
  gather(sample, call, 9:ncol(.)) %>% 
  mutate(FORMAT = strsplit(FORMAT, split = ":"), 
         call = strsplit(call, split = ":")) %>% 
  unnest(cols = c(FORMAT, call))

# get the genotyping data 
SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt %>% 
  filter(FORMAT == "GT") %>% 
  mutate(varID = paste0(CHROM, "-", POS)) %>% 
  mutate(genotypeCall = case_when(
    "0/0" == call ~ "0", 
    "1/1" == call ~ "1", 
    "0/1" == call ~ "2"
  )) %>% 
  mutate(genotypeCall = as.numeric(genotypeCall))


# create the matrix for the input into the mle data 

SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_sp = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt %>% 
  select(sample, varID, genotypeCall) %>% 
  rename(ID = sample) %>% 
  spread(varID, genotypeCall)

```


The mle function is found within the R script supplied by the publication[@Tsoungui_Obama2022-gz]. The number of loci used in the publication was limited to about 10 and the function is unable to do large number of loci due to the size of the matrix that would have to be created so would advise limiting number of loci used, here doing the 6 most diverse loci by he. 

```{r}
# calculating he 

SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt %>% 
  mutate(genotypeCallExpand = case_when(
    2 == genotypeCall ~ "ref/alt", 
    1 == genotypeCall ~ "alt", 
    0 == genotypeCall ~ "ref"
  ))

SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod_sel = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod %>% 
  select(varID, genotypeCallExpand) %>% 
  mutate(genotypeCallExpand = strsplit(genotypeCallExpand, split = "/")) %>% 
  unnest(genotypeCallExpand) %>% 
  group_by(varID, genotypeCallExpand) %>% 
  count() %>% 
  group_by(varID) %>% 
  mutate(total = sum(n)) %>% 
  mutate(freq = n/total)

SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod_sel_he = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod_sel %>% 
  group_by(varID) %>% 
  summarise(he = 1 - sum(freq^2)) %>% 
  arrange(desc(he))



```



```{r running_MLE, cache=TRUE}
# select just the top 6 loci 

SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod_sel_he_top = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod_sel_he %>% 
  head(n = 6)

# select out only the sample id and the varID 
selCols = c("ID", SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_mod_sel_he_top$varID)

inputToMLE = SpotMalariapfPanel_simData_sanger100_fixDf_filt_allgt_gt_sp[, selCols]

# Find the MLEs
est <- mle(inputToMLE, id=TRUE)

# Estimate prevalence
## Unobservable prevalence
unobsprev <- estunobsprev(est)
unobsprev_df = tibble(
  haplotype = dimnames(unobsprev)[[2]], 
  unobsprevalence = c(unobsprev)
)

## Conditional prevalence
condprev <- estcondprev(est)
condprev_df = tibble(
  haplotype = dimnames(condprev)[[2]], 
  condprevalence = c(condprev)
)

## Relative prevalence
relprev <- estrelprev(inputToMLE, id=TRUE)
relprev_df = tibble(
  haplotype = dimnames(relprev)[[2]], 
  relprevalence = c(relprev)
)

prevalences = full_join(
  unobsprev_df, 
  condprev_df
) %>% 
  full_join(relprev_df) %>% 
  arrange(desc(unobsprevalence))

```

```{r}
DT::datatable(prevalences)
```


```{r}
inputToMLE_mat = as.matrix(inputToMLE[, 2:ncol(inputToMLE)])
rownames(inputToMLE_mat) = inputToMLE$ID

allSampleMOIs = tibble()
for (row in 1:nrow(inputToMLE_mat)) {
  currentSampleMOI = samplwiseMOI(inputToMLE_mat[row, ], est)
  allSampleMOIs = bind_rows(allSampleMOIs,
                            tibble(sample = rownames(inputToMLE_mat)[row],
                                   MOI = currentSampleMOI$MOI))
}

DT::datatable(allSampleMOIs)

```

Comparing simulated MOI(COI) vs determined MOI by MultiLociBiallelicModel

```{r}
simCOI = readr::read_tsv("../../data/snp_barcode/SpotMalariapfPanel_simData_sanger100_simCOIs.tab.txt") %>% 
  rename(sample = Patient) %>% 
  left_join(allSampleMOIs)


ggplot(simCOI) +
  geom_count(aes(x = initialCOI,
                 y = MOI)) +
  geom_abline(intercept = 0, slope = 1)

```

```{r}
simCOI_sum = simCOI %>%
  group_by(initialCOI, MOI) %>%
  count()

ggplot(simCOI_sum) +
  geom_col(aes(x = initialCOI, y = n, fill = factor(MOI)), color = "black", position = "dodge") +
  scale_fill_brewer("Observed MOI", palette = "Dark2") + 
  theme_minimal() + 
  labs(x = "Simualted COI")
```


