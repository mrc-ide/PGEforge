{
  "hash": "9747b9434f3478255064a1cca5270352",
  "result": {
    "markdown": "---\ntitle: \"THE REAL McCOIL\"\noutput: html_document\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n# Introduction  \nPrior to running the [THE REAL McCOIL](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005348), you will need install THEREALMcCOIL C++ code from the [EPPIcenter GitHub](https://github.com/EPPIcenter/THEREALMcCOIL) and build it for your machine as below:\n\n1. Clone the code into the directory using the command `git clone https://github.com/EPPIcenter/THEREALMcCOIL.git`. \n3. Navigate to the categorical method directory: `cd THEREALMcCOIL/categorical_method`\n4. Complete the make/installation: `R CMD SHLIB McCOIL_categorical_code.c llfunction_het.c` (Note, prior to running this make step, you may need to erase prior `.so` and `.o` files).\n\n**For the duration of this tutorial `THEREALMcCOIL` will be abbreviated as RMCL**. \n\n## Defining COI\nComplexity of infection (also known as multiplicity of infection) is the number of distinct parasite genetic clones, or parasite genotypes, that are within an individual sample. If there is only a single clone, the host is said to have a monoclonal infection. If there is more than one clone, the sample is said to be polyclonal. COI is the count of these distinct clones within a host. \n<br>\nThe RMCL categorical method uses a MCMC approach based on the heterozygous genotype calls to determine the COI (intuition below). \n<br>\nAlthough the RMCL has a proportional method as well, we do not explore that functionality in this tutorial.\n\n## The data\nAs input for `RMCL`, we will start with a variant call file, abbreviated as a [VCF](chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https://samtools.github.io/hts-specs/VCFv4.3.pdf) of the Sanger Barcode from Vietnam. We will then \"munge\" this file into the wide format of genotype calls needed fro the RMCL categorical method.\n\n### Preparing the data in tidy format\nIn this section, we will \"munge\" our VCF data into a \"tidy\" format following recommendations by the R community in order to make some of the GT column information more useful. We will use the `vcfR` package to make the VCF data \"long\" with the `extract_gt_tidy` in order to perform these manipulations. Then, before running RMCL, we will need to do some additional reformatting our SNP genotype data into a wide-matrix format. The specific format required by RMCL is described [here] (https://github.com/EPPIcenter/THEREALMcCOIL/tree/master/categorical_method). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nvcf <- vcfR::read.vcfR(\"../../data/snp_barcode/sangerBarcode_SNP_INDEL_Pf3D7_ALL_v3.combined.filtered.vqslod6.biallelic_snp.Vietnam.vcf.gz\")\n# extract information\nloci <- vcf@fix[,1:2] %>% \n  tibble::as_tibble() %>% \n  dplyr::mutate(POS = as.numeric(POS),\n                Key = 1:dplyr::n()) %>% \n  dplyr::select(c(\"CHROM\", \"POS\", \"Key\"))\n\n# tidy up the DRC data to long format\nvcf_long <- vcf %>% \n  vcfR::extract_gt_tidy() %>%   # now lets merge the loci information with the individual level information\n  dplyr::full_join(x = loci, y = ., by  = \"Key\") %>% \n  # don't need Key anymore\n  dplyr::select(-c(\"Key\")) %>% \n  dplyr::mutate(\n    gt = dplyr::case_when(gt_GT == \"0/0\" ~ 0,\n                          gt_GT == \"0/1\" ~ 0.5,\n                          gt_GT == \"1/1\" ~ 1)  # change `gt_GT` column to `gt`\n  )\n\n#......................\n# Reformatting into wide format for RMCL  \n#......................\nvcf_RMCL <- vcf_long %>% \n  dplyr::mutate(loci = paste(CHROM, POS, sep = \"|\")) %>% \n  dplyr::select(c(\"loci\", \"Indiv\", \"gt\")) %>% \n  # liftover missing for RMCL \n  dplyr::mutate(gt = ifelse(is.na(gt), -1, gt)) %>% \n  tidyr::pivot_wider(names_from = \"Indiv\",\n                     values_from = \"gt\")\n\n#......................\n# Reformatting into matrix format for RMCL \n#......................\nvcf_RMCLmat <- as.matrix(vcf_RMCL[2:ncol(as.matrix(vcf_RMCL))])\nrownames(vcf_RMCLmat) <- vcf_RMCL[[\"loci\"]]\nvcf_RMCLmat <- t(vcf_RMCLmat)\n```\n:::\n\n\n\n\n\n## Intuition Behind COI and Heterozygosity \nBefore going further, we will introduce a toy example to illustrate how COI and the number of heterozygous sites are related.\n\nConsider a single biallelic SNP in an infection of unknown COI. The process by which that SNP is either heterozygous or homozygous can be conceptualized as series of coin tosses: each strain in the infection will contribute either the reference or alternative allele as each coin toss in a series contributes either a heads or a tails. A SNP is heterozygous if there is more than one strain present (COI>1), and both the reference and alternative are observed at least once. This is analogous to a series of coin tosses with at least one head and one tail. \n\nAs a result, in samples with higher COIs, there is less of a chance that all alleles are identical (i.e. with more coin tosses, it is less likely that all are heads/tails). The RMCL method uses a likelihood based on the number of heterozygous calls to determine the COI count (i.e. how many coins were tossed to produce that number of heterozgous calls throughout the individual sample genome).\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style=\"font-family: Cambria; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> COIlvl </th>\n   <th style=\"text-align:left;\"> Loci </th>\n   <th style=\"text-align:left;\"> Coin Results </th>\n   <th style=\"text-align:left;\"> Genotype Call </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> COI: 1 </td>\n   <td style=\"text-align:left;\"> Loci_1 </td>\n   <td style=\"text-align:left;\"> H </td>\n   <td style=\"text-align:left;\"> Ref </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> COI: 1 </td>\n   <td style=\"text-align:left;\"> Loci_2 </td>\n   <td style=\"text-align:left;\"> T </td>\n   <td style=\"text-align:left;\"> Alt </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> COI: 1 </td>\n   <td style=\"text-align:left;\"> Loci_3 </td>\n   <td style=\"text-align:left;\"> H </td>\n   <td style=\"text-align:left;\"> Ref </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> COI: 2 </td>\n   <td style=\"text-align:left;\"> Loci_1 </td>\n   <td style=\"text-align:left;\"> THT </td>\n   <td style=\"text-align:left;\"> Het </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> COI: 2 </td>\n   <td style=\"text-align:left;\"> Loci_2 </td>\n   <td style=\"text-align:left;\"> HTT </td>\n   <td style=\"text-align:left;\"> Het </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> COI: 2 </td>\n   <td style=\"text-align:left;\"> Loci_3 </td>\n   <td style=\"text-align:left;\"> TTH </td>\n   <td style=\"text-align:left;\"> Het </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> COI: 3 </td>\n   <td style=\"text-align:left;\"> Loci_1 </td>\n   <td style=\"text-align:left;\"> THTTHH </td>\n   <td style=\"text-align:left;\"> Het </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> COI: 3 </td>\n   <td style=\"text-align:left;\"> Loci_2 </td>\n   <td style=\"text-align:left;\"> HTTTHH </td>\n   <td style=\"text-align:left;\"> Het </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> COI: 3 </td>\n   <td style=\"text-align:left;\"> Loci_3 </td>\n   <td style=\"text-align:left;\"> TTTHTH </td>\n   <td style=\"text-align:left;\"> Het </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n## Running RMCL\nNow run the RMCL using the default settings provided in the [Github](https://github.com/EPPIcenter/THEREALMcCOIL/). Note, you will need to create an output file for your results to be written. \n<br>\nNote, the RMCL uses an MCMC approach to infer the COI of each sample. The output file contains the mean, median, and credible interval of the chain (after excluding the burn-in).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Source code, move into correct working directory\norig_wd <- getwd()\nsetwd(\"THEREALMcCOIL/categorical_method/\")\nsource(\"McCOIL_categorical.R\")\n\n# run RMCL \nMcCOIL_categorical(vcf_RMCLmat, maxCOI=25, threshold_ind=20, threshold_site=20,\n                   totalrun=1000, burnin=100, M0=15, e1=0.05, e2=0.05, \n                   err_method=3, path=getwd(), output=\"output_COI\")\n\n# read in our results\nret <- readr::read_tsv(\"output_COI_summary.txt\")\n\n# Return to our original working directory\nsetwd(orig_wd)\n```\n:::\n\n\nIf you see a message indicating the time it took to run RMCL... then you've successfully estimated COI, congratulations!\n\n## Exploring RMCL outputs\nThe outputs from THEREALMcCOIL are written to files in your specified output directory. We have read in the results above with the `readr::read_tsv` function. Below is code to subset to the relevant bits of the output. \n\n::: {.cell}\n\n```{.r .cell-code}\n# Load summary data for DRC\nret_COI <- ret %>% \n  # Subset to COI results\n  dplyr::filter(CorP == \"C\") %>%  # subset to COI information\n  # select to rows we care about\n  dplyr::select(-c(\"file\", \"CorP\")) %>% \n  dplyr::rename(Indiv = name)\n```\n:::\n\n\nWe now have a table with each individual's estimated COI (mean and median) as well as the lower and upper credible interval estimates from the MCMC chain. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nret_COI %>% \n  DT::datatable(.,\n                rownames = F,\n                extensions='Buttons',\n                options = list(\n                  searching = T,\n                  pageLength = 5,\n                  dom = 'Bfrtip',\n                  autoWidth = TRUE,\n                  buttons = c('csv')))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-abd4463b74cee987bc19\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-abd4463b74cee987bc19\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"extensions\":[\"Buttons\"],\"data\":[[\"PV0243-Cx2\",\"PV0244-C\",\"PV0245-Cx2\",\"PV0246-C\",\"PV0247-Cx2\",\"PV0248-C\",\"PV0249-Cx\",\"PV0250-C\",\"PV0251-C\",\"PV0252-C\",\"PV0253-C\",\"PV0254-C\",\"PV0256-C\",\"PV0257-C\",\"PV0258-C\",\"PV0259-C\",\"PV0261-C\",\"PV0262-C\",\"PV0263-C\",\"PV0264-C\",\"PV0265-C\",\"PV0266-C\",\"PV0267-C\",\"PV0268-C\",\"PV0269-C\",\"PV0270-C\",\"PV0271-C\",\"PV0272-C\",\"PV0273-C\",\"PV0274-C\",\"PV0276-C\",\"PV0277-C\",\"PV0278-C\",\"PV0279-C\",\"PV0280-C\",\"PV0281-C\",\"PV0282-C\",\"PV0283-C\",\"PV0284-C\",\"PV0285-C\",\"PV0286-C\",\"PV0287-C\",\"PV0288-C\",\"PV0289-C\",\"PV0290-C\",\"PV0291-C\",\"PV0292-C\",\"PV0293-C\",\"PV0294-C\",\"PV0295-C\",\"PV0296-C\",\"PV0297-C\",\"PV0298-C\",\"PV0299-C\",\"PV0300-C\",\"PV0301-C\",\"PV0302-C\",\"PV0303-C\",\"PV0304-C\",\"PV0305-C\",\"PV0306-C\",\"PV0308-Cx\",\"PV0309-C\",\"PV0310-C\",\"PV0311-C\",\"PV0312-C\",\"PV0313-C\",\"PV0314-C\",\"PV0315-Cx\",\"PV0317-C\",\"PV0318-C\",\"PV0319-C\",\"PV0320-C\",\"PV0321-C\",\"PV0322-C\",\"PV0323-C\",\"PV0324-C\",\"PV0325-C\",\"PV0326-C\",\"PV0327-C\",\"PV0328-C\",\"PV0329-C\",\"PV0330-C\",\"PV0331-Cx\",\"PV0333-C\",\"PV0335-C\",\"PV0336-C\",\"PV0337-C\",\"PV0338-C\",\"PV0339-C\",\"PV0340-C\",\"PV0343-C\",\"PV0344-C\",\"PV0345-C\",\"PV0347-C\",\"PV0355-C\",\"PV0358-C\"],[2,2,1,2,2,3,1,2,2,3,1,2,3,4,2,2,2,2,3,4,2,2,2,5,2,1,2,1,3,2,2,2,2,2,1,4,2,2,1,2,2,2,2,2,2,2,2,3,3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,2,2,2,2,2,3,2,1,1,4,1,2,2,2,2,2,1,3,3,2,2,2,2,2,2,2,1],[1,1,1,1,1,2,1,1,1,2,1,1,2,2,1,1,1,1,2,3,1,1,1,3,1,1,1,1,2,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1],[2.14433,1.79533,1.19603,2.07141,1.86936,2.84371,1.36208,1.99703,2.10865,2.11413,0,1.87184,3.34061,4.32373,1.84999,2.10645,1.62324,1.96511,1.60103,4.12447,2.77002,2.14768,1.64871,4.75497,1.61835,0.96113,2.18669,1.34233,2.63125,1.85224,1.79329,2.25578,2.39936,1.66372,1.47415,4.8305,2.17305,1.78125,0,1.87809,1.82422,2.34322,2.40009,1.67238,2.60823,2.88902,1.94339,3.3019,3.53774,1.2393,2.47321,2.31699,2.28297,2.01428,1.91498,1.93094,2.23324,3.04183,1.85958,1.76368,1.76462,1.97615,1.93024,2.16384,2.05855,2.00672,1.53735,1.48118,1.83944,1.51325,1.9578,1.62323,1.82289,2.02961,1.9035,2.18703,1.95392,1.20643,1.61846,4.17771,1.50374,1.61743,2.29914,1.77656,2.21827,1.76348,1.43512,3.29363,3.4125,1.63128,2.02349,3.16736,2.00743,2.44471,2.53009,1.89741,1.2016],[1,1,1,1,1,2,1,1,1,2,1,1,2,2,1,1,1,1,2,2,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1],[9,8,6,9,8,12,6,8.524999999999981,9,10,1,8,15,18,8,9,7,8,8,17,11,9,7,21,7,5,9,6,11,8,8,9,10,7,7,19,9,8,1,8,8,10,10,7,10,12,8,14,15,6,10,9.524999999999981,9.524999999999981,9,8,8,9,12,8,7,8,8,8,8,9,8,7,7,8,7,8,7,7.52499999999998,8,8,10,8,6,7,17,7,7,10,8,9,7.52499999999998,6,13,14,7,8,12,8,10,10,8,6]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>Indiv<\\/th>\\n      <th>mean<\\/th>\\n      <th>median<\\/th>\\n      <th>sd<\\/th>\\n      <th>quantile0.025<\\/th>\\n      <th>quantile0.975<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"searching\":true,\"pageLength\":5,\"dom\":\"Bfrtip\",\"autoWidth\":true,\"buttons\":[\"csv\"],\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3,4,5]},{\"name\":\"Indiv\",\"targets\":0},{\"name\":\"mean\",\"targets\":1},{\"name\":\"median\",\"targets\":2},{\"name\":\"sd\",\"targets\":3},{\"name\":\"quantile0.025\",\"targets\":4},{\"name\":\"quantile0.975\",\"targets\":5}],\"order\":[],\"orderClasses\":false,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nWe can then explore the output of COI with basic data visualization techniques. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nret_COI %>% \n  ggplot() +\n  geom_pointrange(aes(x = Indiv, y = mean, ymin = quantile0.025, ymax = quantile0.975)) +\n  theme_linedraw() +\n  theme(legend.position = \"none\") + \n  labs(y = \"COI\", x = \"Sample\") +\n  theme(axis.text.x = element_text(angle = 90, size = 4))\n```\n\n::: {.cell-output-display}\n![](RMCL_analysis_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Summary\nIn this tutorial, we used the RMCL to estimate the COI of various malaria infections. We then visualized the results. One of the hardest parts of running the RMCL is specifying your paths correctly - make sure the function can \"see\" both the `McCOIL_categorical_code.c` file as well as your output directory and file path. \n",
    "supporting": [
      "RMCL_analysis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/datatables-binding-0.31/datatables.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../site_libs/dt-ext-buttons-1.13.6/css/buttons.dataTables.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/dt-ext-buttons-1.13.6/js/dataTables.buttons.min.js\"></script>\n<script src=\"../../site_libs/dt-ext-buttons-1.13.6/js/buttons.html5.min.js\"></script>\n<script src=\"../../site_libs/dt-ext-buttons-1.13.6/js/buttons.colVis.min.js\"></script>\n<script src=\"../../site_libs/dt-ext-buttons-1.13.6/js/buttons.print.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}